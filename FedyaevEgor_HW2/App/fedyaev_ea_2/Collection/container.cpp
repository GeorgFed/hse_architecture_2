//------------------------------------------------------------------------------
// container_Constr.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

Container::Container() {
    len = 0;
}

Container::~Container() {
    Clear();
}
//------------------------------------------------------------------------------
// Очистка контейнера от элементов (освобождение памяти)
void Container::Clear() {
    for(int i = 0; i < len; i++) {
        delete cont[i];
    }
    len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
void Container::In(ifstream *ifst) {
    while(!(*ifst).eof()) {
        if((cont[len] = Number::GlobalIn(ifst)) != nullptr) {
            len++;
        }
    }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
void Container::InRnd(int size) {
    while(len < size) {
        if((cont[len] = Number::GlobalInRnd()) != nullptr) {
            len++;
        }
    }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Container::Out(ofstream *ofst) {
    *ofst << "Container contains " << len << " elements." << std::endl;
    for(int i = 0; i < len; i++) {
        *ofst << i << ": ";
        cont[i]->Out(ofst);
    }
}

//------------------------------------------------------------------------------
// Сортировка прямого выбора по убыванию
void Container::SortDescending() {
    int i, j, max_idx;

    // Двигаем границу неотсортированного массива
    for (i = 0; i < len-1; i++)
    {
        // Находим минимальное значение
        max_idx = i;
        for (j = i+1; j < len; j++)
            if (cont[j]->ToReal() > cont[max_idx]->ToReal())
                max_idx = j;

        // Меняем найденный элемент с первым элементом
        std::swap(cont[max_idx], cont[i]);
    }
}
